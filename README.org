* Omniconf

  Command-line options. Environment variables. Configuration files. Defaults of
  all kinds. Almost every program requires some configuration which is usually
  spread around multiple sources. Keeping track of all of them, mapping ones to
  others, making sure they are present and correct, passing them around is a
  constant cause of headache and bad code.

  Configuration libraries, which there are plenty of, promise to solve the
  configuration problems, and they partly do. However, they are usually too
  simple and provide only the mapping of configuration sources to Clojure data,
  without the verification part. Omniconf tries to deliver the complete
  solution, even at the cost of increased complexity.

** Rationale

   Omniconf is developed with the following principles in mind:

   1. *All configuration should be defined and populated a single place.* We
      don't want to grep through your codebase to figure where some shady value
      came from.
   2. *Configuration can be accessed from anywhere in the application.* We
      don't want to carry that port number five layers through the callstack,
      intermixing dynamic vars, optional and keyword arguments, and different
      defaults at each layer. We treat the configuration as an immutable
      constant that is set before your main code is executed.
   3. *All configuration sources must be unified.* It shouldn't matter where the
      option is set from --- it is uniformly set, verified, and accessed as
      regular Clojure data.
   4. *Maximum verification.* We don't want to see FileNotFound stacktraces in
      the middle of your program run. Whole configuration should be checked
      early and automatically before the main application is executed. If there
      are problems with it, a helpful message should be presented to the user.

** Installation

   Add this line to your list of dependencies:

   : [com.grammarly/omniconf "0.1.0"]

** Usage

   1. You start by defining a set of supported options. =cfg/define= takes a map
      of options to their different parameters. The following small example
      shows the syntax:

      #+BEGIN_SRC clojure
(require '[omniconf.core :as cfg])
(cfg/define
  {:hostname {:description "where service is deployed"
              :parser identity
              :required true}
   :port     {:description "HTTP port"
              :parser cfg/parse-number
              :default 8080}})
      #+END_SRC

     The full list of supported parameters is described <TODO> here.

   2. Populate the configuration from available sources:

      #+BEGIN_SRC clojure
      (cfg/populate-from-opts args) ;; args is a CLI options list
      (when-let [conf (cfg/get :conf)]
        (cfg/populate-from-file conf))
      (cfg/populate-from-env)
      #+END_SRC

      The order in which to tap the sources is up to you. Perhaps you want to
      deny environment variables overwrite CLI options, or make the config file
      have the highest priority. In the above example we get the path to the
      configuration file as =--conf= CLI option. For more information on that
      see <TODO>.

   3. Call =verify=. This marks the boundary in your system after which
      whole configuration is guaranteed to be complete and correct.

      #+BEGIN_SRC clojure
      (cfg/verify :quit-on-error true)
      #+END_SRC

      If there is something wrong with the configuration, =verify= will throw a
      proper exception. It is more convenient in REPL because you can inspect
      the error and act upon it. But in the case of a standalone launch you
      would rather see the exact error rather than whole stacktrace. So if
      =:quit-on-error true= is passed, the app will =exit 1= if verification
      fails.

      If everything is alright, =verify= will pretty-print the whole
      configuration map into the standard output. It is very convenient because
      it gives you one final chance to glance on your config values and make
      sure they look good. =:silent true= can be passed to =verify= to prevent
      it from printing the map.


   4. Use =get= to extract arbitrary value from the configuration.

      #+BEGIN_SRC clojure
      (cfg/get :hostname)
      #+END_SRC

      For nested values you can path a path to the value, either as a vector, or
      like varargs:

      #+BEGIN_SRC clojure
      (cfg/get :database :ip)
      (cfg/get [:database :ip])
      #+END_SRC

      =set= allows you to change a value. It is definitely not recommended to
      be used in production code, but may be convenient during development:

      #+BEGIN_SRC clojure
      (cfg/set :database :port 3306)
      (cfg/set [:database :port] 3306)
      #+END_SRC

** Configuration scheme syntax

   Configuration scheme is a map of option names to maps of their parameters.
   Option name is a keyword that will denote the option in the application, and
   maps to configuration sources with the following rules:

   For CLI options:

   : :some-option    =>    --some-option

   For environment variables:

   : :some-option    =>    SOME_OPTION

   Each option can have the following parameters:

   - =:description= --- string that describes this option. This description
     will be used to generate a help message for the program.

   - =:parser= --- a single-arg function that converts a string value from CLI
     or ENV into a Clojure value.

     Standard parsers:
     + =identity= --- string
     + =keyword= --- keyword
     + =cfg/parse-number= --- number
     + =cfg/parse-edn= --- arbitrary Clojure data structure
     + =cfg/parse-filename= --- file or directory

     If =:parser= is nil, the option is considered a boolean one. When such
     option is set from ENV, any value except =0= will be considered =true=.
     When set from CLI, such option doesn't require a value:

     : (cfg/define {:foo {}, :bar {}})
     : ...
     : $ my-app --foo --bar    # Confmap is {:foo true, :baz true}

   - =:default= --- the option will be initialized with this value. The default
     value must be specified as a CLojure datatype, not as a string to be
     parsed.

   - =:required= --- if true, the value for this option must be provided,
     otherwise =verify= will fail.

   - =:required-if= --- a nullary function that returns true if the option value
     must be provided. It is convenient if the necessity of an option depends on
     the values of some other options. Example:

     #+BEGIN_SRC clojure
     (cfg/define {:storage   {:one-of [:file :s3]}
                  :s3-bucket {:requried-if #(= (cfg/get :storage) :s3)}})
     #+END_SRC

   - =:one-of= --- a sequence of allowed values that an option can become. If
     the value isn't present in the =:one-of= list, =verify= will fail.
     =:one-of= automatically implies =:required true= unless you add =nil= as a
     permitted value.

   - =:verifier= --- a function of option name and its value that should throw
     an exception if the value is not correct. Verifier is only executed only if
     the value is not nil, so it doesn't imply =:required true=. Predefined
     verifiers:
     + =verify-file-exists=
     + =verify-directory-non-empty= --- checks if the value is a directory, and
       it is non-empty.

   - =:delayed-tranform= --- a function of option value that will be called not
     immediately, but the first time when the option is accessed in the code.
     Transform will be applied only once, and after that the option will store
     the transformed value. Usefulness of this feature is yet in question. You
     can mimic it by using a custom parser that wraps the value in a =delay=,
     the only difference that you will also have to call =force= on it every
     time.

** License

   Copyright Â© 2016 Grammarly, Inc. Distributed under the Eclipse Public
   License, the same as Clojure. See the file [[https://github.com/clojure-android/lein-droid/blob/master/LICENSE][LICENSE]].
